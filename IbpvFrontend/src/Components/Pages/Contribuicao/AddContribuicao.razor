@page "/addcontribuicao"
@using System.IO
@using IbpvFrontend.src.Services.ServiceUpload
@using IbpvFrontend.src.Components.Pages.Contribuicao.form
@using Microsoft.FluentUI.AspNetCore.Components
@using Color = Microsoft.FluentUI.AspNetCore.Components.Color
@inject Microsoft.FluentUI.AspNetCore.Components.IToastService ToastService
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IProviderContribuicao providerContribuicao
@inject IServiceUpload serviceUpload;
@inject IProviderMembro providerMembro
@inject IDialogService DialogService

<PageTitle>Counter</PageTitle>

<AuthorizeView>
    <Authorized>
        <body class="w-100 h-100 p-3" style="overflow-y: auto;">
        <div class="h-100 w-100 d-md-flex align-items-md-center flex-md-column justify-content-md-center">
            <ContribuicaoForm formsubmit="formSubmitisValid" @ref="_formControbuicao"/>
        </div>
        </body>
        <FluentOverlay @bind-Visible=@visible
                       Opacity="0.4"
                       BackgroundColor="#838383"
                       FullScreen="true"
                       PreventScroll=true
                       Dismissable="false"
        >
            <FluentProgressRing />
        </FluentOverlay>
    </Authorized>
    <NotAuthorized>
       @try{
            Navigation.NavigateTo("/");
       }catch{}
    </NotAuthorized>
</AuthorizeView>

@code {

    ContribuicaoForm _formControbuicao;

    private bool visible;
    //HandleValidSubmit
    //quando o formulario for valido
    private async Task formSubmitisValid((ContribuicaoPostDTO formvalues, string tkMembro) data)
    {
        var formvalues = data.formvalues;
        var tkMembro = data.tkMembro;
        bool tokenValid = false;

        if (!String.IsNullOrEmpty(tkMembro))
        {
            var membroId = await verifyToken(tkMembro);
            if (membroId.items.Count == 1)
            {
                formvalues.IdMembro = membroId.items[0].Id;
                tokenValid = true;
            }
           
        }
        
        else
        {
            tokenValid = true;
        }

        if (tokenValid == false)
        {
            await DialogService.ShowErrorAsync("Token de Membro Invalido");
        }

        if (tokenValid)
        {
            //verificar se tem imagem
            if (_formControbuicao.getmemoryStreamExist())
            {
                //chama o overlay e tenta fazer o upload
                visible = true;
                StateHasChanged();
                try
                {
                    formvalues.UrlEnvelope =  await getMsAndUpload();
                    await postContribuicao(formvalues);
                }
                catch (Exception e)
                {
                    await DialogService.ShowErrorAsync("Erro ao adicionar imagem");
                }
            }
        
            //se não tiver imagem notifica o usuario.
            else
            {
                var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
                {
                    Content = new()
                    {
                        Title = "Atenção",
                        MarkupMessage = new MarkupString("Você está prestes a enviar uma contribuição sem  <strong>imagem</strong>"),
                        Icon = new Icons.Filled.Size24.Warning(),
                        IconColor = Color.Warning,
                    },
                    PrimaryAction = "Voltar",
                    SecondaryAction = "Enviar",
                    Width = "500px",
                
                });
                var result = await dialog.Result;

                if (result.Cancelled)
                {
                    visible = true;
                    StateHasChanged();
                    await postContribuicao(formvalues);
                }
            }
            visible = false;
            StateHasChanged();
        }
      
    }
    
    //pegar e fazer upload
    private async Task<string> getMsAndUpload()
    {
       
        using (var ms = new MemoryStream())
        {
            var imageData = await _formControbuicao.getMStream();
            var upload = await serviceUpload.upload("17ercMWMOgrgoYViCqQogmw6tQ5vT5tjI",$"{imageData.fileName}_{DateTime.Now.Ticks}", imageData.memoryStream ,imageData.fileType);
            return upload;
        }
       
       
    }
    
    //pegar e fazer o post
    
    //post
    private async Task postContribuicao(ContribuicaoPostDTO contribuicao)
    {
        try
        {
            await  providerContribuicao.addContribuicao(contribuicao);
            ToastService.ShowSuccess("Contribuição adicionada com sucesso.");
            _formControbuicao.cleanForms();
            visible = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await DialogService.ShowErrorAsync("Erro ao enviar contribuição");
        }
    }

    
    //verificar o token
    //verifica o tokenmembro
    private async Task<PaginetedResultDTO<UsuarioPagDTO>> verifyToken(string token)
    {
        var membro =  await providerMembro.getPageUsuario(1, 10, token: token);
        return membro;
    }

}

